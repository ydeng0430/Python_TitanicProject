# -*- coding: utf-8 -*-
"""kaggle_titanic_pp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YCEoIBNOgd10BkaBGO8QUuqfK-5-DqHR

# Titanic - Machine Learning from Disater (Kaggle Competition)

## LOADING

Load libraries and files as pandas dataframe
"""

# Data manipulation packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Modelling packages
from sklearn import svm
from sklearn.model_selection import train_test_split
from itertools import combinations
import statsmodels.api as sm
import statsmodels.formula.api as smf

# Filter all warnings. 
import warnings
warnings.filterwarnings('ignore')

# Open the local files
from google.colab import files
uploaded = files.upload()

# Load local files as pandas dataframe
train = pd.read_csv(r'train.csv')
test = pd.read_csv(r'test.csv')

"""## DISCOVERING

Describe the train and test dataset and show the first 6 entries
"""

# Examine passenger data in train dataset
train.head(6)

# Examine passengers data in test dataset
test.head(6)

# Check for possible outliers for the train dataset
train.describe()

# Check for possible outliers for the test dataset
test.describe()

"""Identifying missing value in train and test datasets"""

# Check for nulls for the train dataset
null_check_train = train.isnull().sum()
null_check_train

# Show the nulls in Age, Cabin, and Embarked variables in percentage
null_age_train_percent = round(null_check_train['Age']/(len(train['Age'])/100),2)
null_cabin_train_percent = round(null_check_train['Cabin']/(len(train['Cabin'])/100),2)
null_embarked_train_percent = round(null_check_train['Embarked']/(len(train['Embarked'])/100),2)
print(null_age_train_percent,'% of data in Age variable are missing.')
print(null_cabin_train_percent,'% of data in Cabin variable are missing.')
print(null_embarked_train_percent,'% of data in Embarked variable are missing.')

# The bar plot of missing values in percentage for train dataset
df_null_train = pd.DataFrame({'Variable':['Age','Cabin','Embarked'],
                              'Percentage':[null_age_train_percent,
                                            null_cabin_train_percent,
                                            null_embarked_train_percent]})
sns.catplot(x='Variable',y='Percentage',kind='bar', data=df_null_train,palette="Blues_d")
plt.show()

# Check for nulls for the test dataset
null_check_test = test.isnull().sum()
null_check_test

# Show the nulls in Age, Fare, and Cabin variables in percentage
null_age_test_percent = round(null_check_test['Age']/(len(test['Age'])/100),2)
null_fare_test_percent = round(null_check_test['Fare']/(len(test['Fare'])/100),2)
null_cabin_test_percent = round(null_check_test['Cabin']/(len(test['Cabin'])/100),2)

print(null_age_test_percent,'% of data in Age variable are missing.')
print(null_fare_test_percent,'% of data in Embarked variable are missing.')
print(null_cabin_test_percent,'% of data in Cabin variable are missing.')

# The bar plot of missing values in percentage for test dataset
df_null_test = pd.DataFrame({'Variable':['Age','Fare','Cabin'],
                              'Percentage':[null_age_test_percent,
                                            null_fare_test_percent,
                                            null_cabin_test_percent]})
sns.catplot(x='Variable',y='Percentage',kind='bar', data=df_null_test,palette="Blues_d")
plt.show()

"""## FILLING MISSING VALUES

Fill the missing values in Age variable
"""

# Fill the missing values of Age variable in train dataset with median
age_median_train = train['Age'].dropna().median()
train['Age'] = train['Age'].fillna(age_median_train)
train.isnull().sum()

# The histogram of Age variable after filling missing values for train dataset
sns.distplot(train['Age'])
plt.show()

# Fill the missing values of Age variable in test dataset with median
age_median_test = test['Age'].dropna().median()
test['Age'] = test['Age'].fillna(age_median_test)
test.isnull().sum()

# The histogram of Age variable after filling missing values for test dataset
sns.distplot(test['Age'])
plt.show()

"""Fill the missing values in Fare variable"""

# Fill the missing values of Fare variable in test dataset with median
fare_median_test = test['Fare'].dropna().median()
test['Fare'] = test['Fare'].fillna(fare_median_test)
test.isnull().sum()

# The histogram of Fare variable after filling missing values for test dataset
sns.distplot(test['Fare'])
plt.show()

"""Fill the missing values in Embarked variable"""

# Fill the missing values of Embarked variable in train dataset with "S"
print(train['Embarked'].unique())
print(len(train[train['Embarked'] == 'S']), 'of S are in Embarked variable.')
print(len(train[train['Embarked'] == 'C']), 'of C are in Embarked variable.')
print(len(train[train['Embarked'] == 'Q']), 'of Q are in Embarked variable.')
train['Embarked'] = train['Embarked'].fillna('S')
print(train['Embarked'].unique())
train.isnull().sum()

# The bar plot of Embarked variable after filling missing values for train dataset
sns.catplot(x='Embarked',kind='count', data=train,palette="Blues_d")
plt.show()

"""## FITTING THE MODEL

Check the correlation between variables in train dataset
"""

# The correlation between variables
train['Sex'] = train['Sex'].map({'male':1,'female':0})
train['Embarked'] = train['Embarked'].map({'S':1,'Q':2,'C':3})
sns.heatmap(train.drop('PassengerId',axis=1).corr(),square=True, cmap='Blues')
plt.show()

train.drop('PassengerId',axis=1).head()

"""Fit Supprt Vector Machine (SVC) models to find the most fitted model by making a test and a train part from the train data and comparing the accuracy of models"""

# A SVC model with variables Pclass, Sex, Age, SibSp, Parch, Fare, and Embarked
variables_0 = ['Pclass' , 'Sex' , 'Age' , 'SibSp' , 'Parch' ,'Fare','Embarked']
X0 = train[variables_0]
y = train['Survived']
X0_train, X0_test, y_train, y_test = train_test_split(X0, y, test_size=0.2)

model_0 = svm.SVC(kernel='linear').fit(X0_train, y_train)
accuracy0 = model_0.score(X0_test, y_test)
print('The accuracy of model_0 is ', round(accuracy0*100,2),'%.',sep='')

# SVC models without one variable
variables_pool = ['Pclass' , 'Sex' , 'Age' , 'SibSp' , 'Parch' ,'Fare','Embarked']
for variable in variables_pool :
  X_one = train[variables_pool].drop(variable,axis=1)
  X_one_train, X_one_test, y_train, y_test = train_test_split(X_one, y, test_size=0.2)
  model_one = svm.SVC(kernel='linear').fit(X_one_train, y_train)
  accuracy_one = model_one.score(X_one_test, y_test)
  if accuracy_one >= accuracy0:
    print('The accuracy of model without variable ', variable, ' is ', round(accuracy_one*100,2),'%.',sep='')

# SVC model without two variables
variables_pool_2 = list(combinations(variables_pool,2))
for variable in variables_pool_2 :
  X_two = train[variables_pool].drop([variable[0],variable[1]],axis=1)
  X_two_train, X_two_test, y_train, y_test = train_test_split(X_two, y, test_size=0.2)
  model_two = svm.SVC(kernel='linear').fit(X_two_train, y_train)
  accuracy_two = model_two.score(X_two_test, y_test)
  if accuracy_two >= accuracy0:
    print('The accuracy of model without variables ', variable, ' is ', round(accuracy_two*100,2),'%.',sep='')

# SVC model without three variables
variables_pool_3 = list(combinations(variables_pool,3))
for variable in variables_pool_3 :
  X_three = train[variables_pool].drop([variable[0],variable[1],variable[2]],axis=1)
  X_three_train, X_three_test, y_train, y_test = train_test_split(X_three, y, test_size=0.2)
  model_three = svm.SVC(kernel='linear').fit(X_three_train, y_train)
  accuracy_three = model_three.score(X_three_test, y_test)
  if accuracy_three >= accuracy0:
    print('The accuracy of model without variables ', variable, ' is ', round(accuracy_three*100,2),'%.',sep='')

# SVC model without four variables
variables_pool_4 = list(combinations(variables_pool,4))
for variable in variables_pool_4 :
  X_four = train[variables_pool].drop([variable[0],variable[1],variable[2],variable[3]],axis=1)
  X_four_train, X_four_test, y_train, y_test = train_test_split(X_four, y, test_size=0.2)
  model_four = svm.SVC(kernel='linear').fit(X_four_train, y_train)
  accuracy_four = model_four.score(X_four_test, y_test)
  if accuracy_four >= accuracy0:
    print('The accuracy of model without variables ', variable, ' is ', round(accuracy_four*100,2),'%.',sep='')

"""## Prediction"""

variables_drop = ['Pclass', 'Age', 'SibSp']
x_test = test[variables_pool].drop(variables_drop,axis=1)
x_test['Sex'] = x_test['Sex'].map({'male':1,'female':0})
x_test['Embarked'] = x_test['Embarked'].map({'S':1,'Q':2,'C':3})
x_test

X = train[variables_pool].drop(variables_drop,axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
model = svm.SVC(kernel='linear').fit(X_train, y_train)
y_pred = model.predict(x_test)
y_pred = pd.DataFrame(y_pred)

"""# Save the output in csv format"""

output = test.iloc[:,[0]].merge(y_pred,how='left',left_index=True,right_index=True).set_index('PassengerId').rename(columns={0:'Survived'})
output

"""## Publish """

!jupyter nbconvert --to html kaggle_titanic_pp.ipynb